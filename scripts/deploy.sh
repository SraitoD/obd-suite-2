#!/bin/bash
set -euo pipefail

# Usage: ./deploy.sh [dev|prod] [version]

ENV=${1:-dev}
VERSION=${2:-latest}
COMPOSE_FILE="docker-compose.${ENV}.yml"
PROJECT_NAME="obd-suite-2-${ENV}"

echo "üöÄ D√©ploiement de OBD Suite 2 (v${VERSION}) en ${ENV}..."

# Charger les variables d'environnement
set -a
source .env
set +a

# Pull des derni√®res images
docker compose -f ${COMPOSE_FILE} -p ${PROJECT_NAME} pull

# Stop les services existants
docker compose -f ${COMPOSE_FILE} -p ${PROJECT_NAME} down --remove-orphans

# Rebuild si n√©cessaire
if [ "${ENV}" = "prod" ]; then
    docker compose -f ${COMPOSE_FILE} -p ${PROJECT_NAME} build --no-cache
fi

# D√©marrer les services
docker compose -f ${COMPOSE_FILE} -p ${PROJECT_NAME} up -d

# V√©rification
if docker compose -f ${COMPOSE_FILE} -p ${PROJECT_NAME} ps | grep -q "Up"; then
    echo "‚úÖ D√©ploiement r√©ussi!"
    if [ "${ENV}" = "prod" ]; then
        echo "üåê Application disponible sur: https://${DOMAIN}"
    else
        echo "üåê Application disponible en local (port forwarding n√©cessaire)"
    fi
else
    echo "‚ùå √âchec du d√©ploiement"
    exit 1
fi
